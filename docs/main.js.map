{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/password.validator.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordStrengthValidator, checkPassword } from './password.validator';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  \n  title = 'Epictenet';\n  emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\";\n  phoneNumber = \"^^((\\\\+91-?)|0)?[0-9]{10}$\";\n  epicteNetForm = new FormGroup({\n    firstName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.pattern(this.emailPattern)]),\n    password: new FormControl('', [Validators.required, PasswordStrengthValidator]),\n    reapeatPassword: new FormControl('', [Validators.required , checkPassword]),\n    phoneNumber: new FormControl('', [Validators.required, Validators.pattern(this.phoneNumber)]),\n  });\n  showData: boolean = false;\n  getFormData(){\n    console.log(this.epicteNetForm);\n    this.showData = true;\n    \n  }\n//   public checkPasswords(control: FormGroup) { // here we have the 'passwords' group\n//   let pass = control.get('password').value;\n//   let confirmPass = control.get('reapeatPassword').value;\n\n//   return pass === confirmPass ? null : { notSame: true }     \n// }\n}\n","<div class=\"container register\">\n  <div class=\"row\">\n    <div class=\"col-md-3 register-left\">\n      <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\n      <h3>Welcome</h3>\n      <br>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.firstName.valid == false && epicteNetForm.get('firstName').touched\">First Name\n        Required</p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.lastName.valid == false && epicteNetForm.get('lastName').touched\">Last Name\n        Required</p>\n      <p class=\"text-warning\" *ngIf=\"epicteNetForm.controls.email.valid == false && epicteNetForm.get('email').touched\">\n        Email Should be in format abc@example.com</p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.phoneNumber.valid == false && epicteNetForm.get('phoneNumber').touched\">Phone\n        number should be at least 10 number</p>\n\n\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.password.valid == false && epicteNetForm.get('password').touched\">Passwor Should\n        Contain\n        One Lower Case Letter\n        One Special Character\n        One Number\n        Length 8 Character\n      </p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.reapeatPassword.valid == false && epicteNetForm.get('reapeatPassword').touched\">\n        Password don't match</p>\n      <p *ngIf=\"showData\">\n        First Name: {{epicteNetForm.value.firstName}}<br>\n        Last Name: {{epicteNetForm.value.lastName}}<br>\n        Email: {{epicteNetForm.value.email}}<br>\n        Password: {{epicteNetForm.value.password}}<br>\n\n      </p>\n    </div>\n    <div class=\"col-md-9 register-right\">\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n          <h3 class=\"register-heading\">Register as a Employee</h3>\n          <form class=\"row register-form\" [formGroup]=\"epicteNetForm\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.firstName.valid == false && epicteNetForm.get('firstName').touched}\"\n                  formControlName=\"firstName\" placeholder=\"First Name *\" value=\"\" />\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.lastName.valid == false && epicteNetForm.get('lastName').touched}\"\n                  formControlName=\"lastName\" placeholder=\"Last Name *\" value=\"\" />\n\n              </div>\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.password.valid == false && epicteNetForm.get('password').touched}\"\n                  formControlName=\"password\" placeholder=\"Password *\" value=\"\" />\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <input type=\"email\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.email.valid == false && epicteNetForm.get('email').touched}\"\n                  formControlName=\"email\" placeholder=\"Your Email *\" value=\"\" />\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" minlength=\"10\" maxlength=\"10\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.phoneNumber.valid == false && epicteNetForm.get('phoneNumber').touched}\"\n                  formControlName=\"phoneNumber\" name=\"txtEmpPhone\" class=\"form-control\" placeholder=\"Your Phone *\"\n                  value=\"\" />\n\n              </div>\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.reapeatPassword.valid == false && epicteNetForm.get('reapeatPassword').touched}\"\n                  formControlName=\"reapeatPassword\" placeholder=\"Confirm Password *\" value=\"\" />\n              </div>\n              <button type=\"button\" *ngIf=\"epicteNetForm.valid == true\" (click)=\"getFormData()\"\n                class=\"btnRegister\">Register</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { AbstractControl, ValidationErrors, FormGroup  } from \"@angular/forms\"\r\n\r\nexport const PasswordStrengthValidator = function (control: AbstractControl): ValidationErrors | null {\r\n\r\n  console.log(control);\r\n  \r\n\r\n  let value: string = control.value || '';\r\n\r\n  if (!value) {\r\n    return null\r\n  }\r\n  let upperCaseCharacters = /[A-Z]+/g\r\n  if (upperCaseCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine Upper case characters,current value ${value}` };\r\n  }\r\n\r\n  let lowerCaseCharacters = /[a-z]+/g\r\n  if (lowerCaseCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine lower case characters,current value ${value}` };\r\n  }\r\n\r\n\r\n  let numberCharacters = /[0-9]+/g\r\n  if (numberCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine number characters,current value ${value}` };\r\n  }\r\n\r\n  let specialCharacters = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/\r\n  if (specialCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine special character,current value ${value}` };\r\n  }\r\n  return null;\r\n}\r\n\r\nexport const checkPassword = function (control: AbstractControl): ValidationErrors | null {\r\n  let value: string = control.value || '';\r\n  if (!value) {\r\n    return null\r\n  }\r\n  if (control.parent.value.password !== control.value){\r\n    return { checkPassword: `Not matching password field,current value ${value}` };\r\n  }\r\n  return null;\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}