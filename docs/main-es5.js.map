{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/password.validator.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","emailPattern","phoneNumber","epicteNetForm","firstName","required","lastName","email","pattern","password","reapeatPassword","showData","console","log","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","PasswordStrengthValidator","control","value","upperCaseCharacters","test","passwordStrength","lowerCaseCharacters","numberCharacters","specialCharacters","checkPassword","parent","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { PasswordStrengthValidator, checkPassword } from './password.validator';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  \n  title = 'Epictenet';\n  emailPattern = \"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\";\n  phoneNumber = \"^^((\\\\+91-?)|0)?[0-9]{10}$\";\n  epicteNetForm = new FormGroup({\n    firstName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.pattern(this.emailPattern)]),\n    password: new FormControl('', [Validators.required, PasswordStrengthValidator]),\n    reapeatPassword: new FormControl('', [Validators.required , checkPassword]),\n    phoneNumber: new FormControl('', [Validators.required, Validators.pattern(this.phoneNumber)]),\n  });\n  showData: boolean = false;\n  getFormData(){\n    console.log(this.epicteNetForm);\n    this.showData = true;\n    \n  }\n//   public checkPasswords(control: FormGroup) { // here we have the 'passwords' group\n//   let pass = control.get('password').value;\n//   let confirmPass = control.get('reapeatPassword').value;\n\n//   return pass === confirmPass ? null : { notSame: true }     \n// }\n}\n","<div class=\"container register\">\n  <div class=\"row\">\n    <div class=\"col-md-3 register-left\">\n      <img src=\"https://image.ibb.co/n7oTvU/logo_white.png\" alt=\"\" />\n      <h3>Welcome</h3>\n      <br>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.firstName.valid == false && epicteNetForm.get('firstName').touched\">First Name\n        Required</p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.lastName.valid == false && epicteNetForm.get('lastName').touched\">Last Name\n        Required</p>\n      <p class=\"text-warning\" *ngIf=\"epicteNetForm.controls.email.valid == false && epicteNetForm.get('email').touched\">\n        Email Should be in format abc@example.com</p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.phoneNumber.valid == false && epicteNetForm.get('phoneNumber').touched\">Phone\n        number should be at least 10 number</p>\n\n\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.password.valid == false && epicteNetForm.get('password').touched\">Passwor Should\n        Contain\n        One Lower Case Letter\n        One Special Character\n        One Number\n        Length 8 Character\n      </p>\n      <p class=\"text-warning\"\n        *ngIf=\"epicteNetForm.controls.reapeatPassword.valid == false && epicteNetForm.get('reapeatPassword').touched\">\n        Password don't match</p>\n      <p *ngIf=\"showData\">\n        First Name: {{epicteNetForm.value.firstName}}<br>\n        Last Name: {{epicteNetForm.value.lastName}}<br>\n        Email: {{epicteNetForm.value.email}}<br>\n        Password: {{epicteNetForm.value.password}}<br>\n\n      </p>\n    </div>\n    <div class=\"col-md-9 register-right\">\n      <div class=\"tab-content\" id=\"myTabContent\">\n        <div class=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n          <h3 class=\"register-heading\">Register as a Employee</h3>\n          <form class=\"row register-form\" [formGroup]=\"epicteNetForm\">\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.firstName.valid == false && epicteNetForm.get('firstName').touched}\"\n                  formControlName=\"firstName\" placeholder=\"First Name *\" value=\"\" />\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.lastName.valid == false && epicteNetForm.get('lastName').touched}\"\n                  formControlName=\"lastName\" placeholder=\"Last Name *\" value=\"\" />\n\n              </div>\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.password.valid == false && epicteNetForm.get('password').touched}\"\n                  formControlName=\"password\" placeholder=\"Password *\" value=\"\" />\n              </div>\n            </div>\n            <div class=\"col-md-6\">\n              <div class=\"form-group\">\n                <input type=\"email\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.email.valid == false && epicteNetForm.get('email').touched}\"\n                  formControlName=\"email\" placeholder=\"Your Email *\" value=\"\" />\n              </div>\n              <div class=\"form-group\">\n                <input type=\"text\" minlength=\"10\" maxlength=\"10\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.phoneNumber.valid == false && epicteNetForm.get('phoneNumber').touched}\"\n                  formControlName=\"phoneNumber\" name=\"txtEmpPhone\" class=\"form-control\" placeholder=\"Your Phone *\"\n                  value=\"\" />\n\n              </div>\n              <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\"\n                  [ngClass]=\"{'class-error': epicteNetForm.controls.reapeatPassword.valid == false && epicteNetForm.get('reapeatPassword').touched}\"\n                  formControlName=\"reapeatPassword\" placeholder=\"Confirm Password *\" value=\"\" />\n              </div>\n              <button type=\"button\" *ngIf=\"epicteNetForm.valid == true\" (click)=\"getFormData()\"\n                class=\"btnRegister\">Register</button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { AbstractControl, ValidationErrors, FormGroup  } from \"@angular/forms\"\r\n\r\nexport const PasswordStrengthValidator = function (control: AbstractControl): ValidationErrors | null {\r\n\r\n  console.log(control);\r\n  \r\n\r\n  let value: string = control.value || '';\r\n\r\n  if (!value) {\r\n    return null\r\n  }\r\n  let upperCaseCharacters = /[A-Z]+/g\r\n  if (upperCaseCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine Upper case characters,current value ${value}` };\r\n  }\r\n\r\n  let lowerCaseCharacters = /[a-z]+/g\r\n  if (lowerCaseCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine lower case characters,current value ${value}` };\r\n  }\r\n\r\n\r\n  let numberCharacters = /[0-9]+/g\r\n  if (numberCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine number characters,current value ${value}` };\r\n  }\r\n\r\n  let specialCharacters = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/\r\n  if (specialCharacters.test(value) === false) {\r\n    return { passwordStrength: `text has to contine special character,current value ${value}` };\r\n  }\r\n  return null;\r\n}\r\n\r\nexport const checkPassword = function (control: AbstractControl): ValidationErrors | null {\r\n  let value: string = control.value || '';\r\n  if (!value) {\r\n    return null\r\n  }\r\n  if (control.parent.value.password !== control.value){\r\n    return { checkPassword: `Not matching password field,current value ${value}` };\r\n  }\r\n  return null;\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}